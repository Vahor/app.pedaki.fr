// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

enum Status {
  UNDEFINED
  CREATING
  DELETING
  ACTIVE
}

model Workspace {
  id        String   @id @default(cuid()) @db.VarChar(25)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name String @db.VarChar(50)

  // Date when a workspace was deleted
  // We keep it in our database for 10 years
  // So we can still download the subscription receipts
  deletedAt DateTime? @map("deleted_at")

  // Used as subdomain when the workspace is created
  // An subdomain is null if the workspaces was deleted (as we need it to be unique)
  subdomain String? @unique @db.VarChar(60)

  // The user responsible for the workspace
  stripeCustomerId String @map("stripe_customer_id")
  billingEmail     String @map("billing_email") @db.VarChar(255)
  billingName      String @map("billing_name") @db.VarChar(255)

  expectedStatus Status @default(UNDEFINED) @map("expected_status") // Changed by the backend
  currentStatus  Status @default(UNDEFINED) @map("current_status") // Should be only changed with an information from the client

  members WorkspaceMember[]

  subscriptions  WorkspaceSubscription[]
  tokens         WorkspaceToken[]
  pendingInvites PendingWorkspaceInvite[]

  @@index([id])
  @@map("workspace")
}

model WorkspaceToken {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  token     String  @unique /// @encrypted
  tokenHash String? @unique @map("token_hash") @db.VarChar(320) /// @encryption:hash(token)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id") @db.VarChar(25)

  @@index([workspaceId])
  @@index([tokenHash])
  @@map("token_to_workspace")
}

// Delete with a cron or when the workspace is created
model PendingWorkspaceCreation {
  id String @id @default(cuid()) @db.VarChar(25)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  stripePaymentId String?   @unique @map("stripe_payment_id")
  paidAt          DateTime? @map("paid_at")
  workspaceId     String?   @unique @map("workspace_id") @db.VarChar(25)

  // In there we store the data needed to create the workspace (CreateWorkspaceInput)
  data String @db.Text /// @encrypted

  // Used here as a lock to prevent creating two workspaces at the same time
  subdomain String @unique @db.VarChar(60)

  @@map("pending_workspace_creation")
}

model PendingWorkspaceInvite {
  createdAt DateTime @default(now()) @map("created_at")

  workspaceId String    @map("workspace_id") @db.VarChar(25)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  name String @db.VarChar(255)

  email     String  @db.VarChar(255) /// @encrypted
  emailHash String? @unique @map("email_hash") @db.VarChar(500) /// @encryption:hash(email)

  @@unique([email, workspaceId])
  @@index([workspaceId])
  @@index([emailHash])
  @@map("pending_workspace_invite")
}

// Type can be "extra_support", "scaler" etc.
// This type should map to a stripe product in our code
enum ProductType {
  HOSTING
}

// To get the current subscription, we can just get the one with the latest paidUntil date
model WorkspaceSubscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  type ProductType

  // Null if it's a free subscription (not linked to stripe)
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")

  // Start of the current period that the subscription has been invoiced for. Null if it's a free subscription.
  currentPeriodStart DateTime? @map("current_period_start")
  // End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. Null if it's a free subscription.
  currentPeriodEnd   DateTime? @map("current_period_end")
  // If the subscription has ended, the date the subscription ended.
  endedAt            DateTime? @map("ended_at")
  // A date in the future at which the subscription will automatically get canceled.
  cancelAt           DateTime? @map("cancel_at")
  // If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  canceledAt         DateTime? @map("canceled_at")

  resources WorkspaceResource[]

  workspace             Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId           String    @db.VarChar(25)
  workspaceCreationData Json      @map("workspace_creation_data")

  @@index([workspaceId])
  @@map("workspace_subscriptions")
}

model WorkspaceMember {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  email String @db.VarChar(255)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id") @db.VarChar(25)

  @@id([email, workspaceId])
  @@index([workspaceId])
  @@index([email])
  @@map("workspace_members")
}

// AKA Server / Database etc
model WorkspaceResource {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  region String? @db.VarChar(25) // Null if it's a global resource

  provider String @db.VarChar(25) // aws, cloudflare, etc
  type     String @db.VarChar(25) // server, dns, database etc

  id String @unique @db.VarChar(255) // The identifier of the resource (server id, database id etc)

  data Json // As we can't know the structure of the data, we'll just store it as a json blob. We'll have to parse it knowing the type,region,provider etc

  subscription   WorkspaceSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?

  @@index([subscriptionId])
  @@index([id])
  @@map("workspace_resources")
}
